# -*- coding: utf-8 -*-
"""data transpose .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16MrFjYAw4YJhw3gI6s0DC5XFEDnl4npY
"""

import pickle
import numpy as np
import matplotlib.pyplot as plt

with open('./2021_10_22.pkl', 'rb') as f:
  datas = pickle.load(f)
print(datas[0])

ch = ['Am', 'F', 'C', 'G']
for i in datas:
  c = i['New_chord']
  for j in range(len(c)-3):
    if c[j] == 'Am':
      if c[j+1] == 'F':
        if c[j+2] == 'C':
          if c[j+3] == 'G':
            # print(i['Songname'])
            # break
            if i['Original_keynote'] == 'C':
              print(i['Songname'])
              break

8## for item in db
## item = [{year : *, country : *, genre : *, chord : [C F D A ...], chord_rates ; [{C : 0.3, ...}], scale : *}]

## 이소라-track9
## {'B': 28, 'F#': 24, 'Emaj7': 14, 'G#min7': 14, 'D#min7': 10, 'E': 10, 'C#min7': 9, 'C#m': 7, 'G#m': 7, 'Emaj6': 4, 'F#maj6': 4, 'D#7': 3, 'F#7': 3, 'Bm': 2, 'Em': 2, 'D#': 2, 'D#m': 2, 'Bmaj7': 2, 'A#dim': 2, 'C#dim': 1, 'Gmaj7': 1, 'G#hdim7': 1, 'Edim': 1, 'C#7': 1, 'Bmaj6': 1}

## idea
# 코드별 번호 생성(# b major minor 고려방법?)
# 코드별 장-단조 체크
# 최종 장-단조 변수설정
# 장-단조 변수에 따른 변조값 설정
# 코드별 번호 변조값에 따라 변경  (using minus 경우 음수처리?)
# item type 과 동일하게 결과값 return
# chord_rates 코드 key값도 수정

## item 데이터 생성 전 복붙 데이터 처리
# 정확히는 요 섹션과 아래 섹션까지 한번에 홈페이지에서 처리함
with open("우린 어쩌다.txt", 'r') as f:
	a = f.read()
b = a.split()
# 시작시 코드가 아닌 N 으로 시작
if "N" in b:
  b.remove("N")
# print(a)

from collections import Counter
c = Counter(b)
print(b)
print(c)
print(c.keys())

# item 1차 데이터(웹사이트 입력 직후) 생성
year = int(input())
country = input()
genre = input()
transpose = input()
chord = b
_sum = sum(c.values())
print(_sum)
for i in c.keys():
  c[i] /= _sum
chord_rates = c
item = [{'year' : year, 'country' : country, 'genre' : genre, 'transpose' : transpose, 'chord' : b, 'chord_rates' : chord_rates }]
print(item)

# # 1차 데이터 저장 이후 변조를 통한 2차 데이터 생성
# # transpose 정도 구하기
# chord_number = {'C' : 0,
#                 'D' : 2,
#                 'E' : 4,
#                 'F' : 5,
#                 'G' : 7,
#                 'A' : 9,
#                 'B' : 11}

# def change_chord_to_number(target, chord_number):
#   ans = chord_number[target[0]]
#   if len(target) > 1:
#     if target[1] == '#':
#       ans = (ans + 1) % 12
#     if target[1] == 'b':
#       ans = (ans - 1) % 12       ## (-1 % 12 = 11로 나옴)
#     if len(target) > 2 and target[2] == 'm':
#       ans = str(2) + str(ans) 
#   return ans

# _trans = change_chord_to_number(transpose, chord_number)
# print(_trans)

# ## We change the chord in item to number with using change_chord_to_number

# def all_chords_changes(_trans, item):

#   if _trans[0] == 2 :    ## 단조인 경우
#     _trans.remove(2)
#     _trans -= 3 % 12

#   for i in range(len(item[0]['chord'])):
#     item[0]['chord'][i] =(change_chord_to_number(item[0]['chord'][i], chord_number) - _trans) % 12
  
#   return item[0][chord]

# item[0]['chord'] = all_chords_changes(_trans, item)
# print(Item)

import matplotlib.pyplot as plt

plt.title('track9')
plt.hist(b)
plt.show()

0 2 4 5 7 9 11
minor -> 2 + chord
- m 만큼 transpose
'2' + str(int('0')-1)
2 11

from collections import Counter

def welcome_capstone_hell():

    #장조 음계
    chord_u = ['C','C#','D','D#','E','F','F#','G','G#','A','A#','B']
    chord_d = ['C','Db','D','Eb','E','F','Gb','G','Ab','A','Bb','B']
    #단조 음계
    chord_u_min = ['Cm','C#m','Dm','D#m','Em','Fm','F#m','Gm','G#m','Am','A#m','Bm']
    chord_d_min = ['Cm','Dbm','Dm','Ebm','Em','Fm','Gbm','Gm','Abm','Am','Bbm','Bm']


    #### input and make 1st data ####
    year = int(input())
    country = input()
    genre = input()
    transpose = input()
    _chord = input()
    # 가수이름, bpm 등 정보 다 안넣음 어짜피 홈피가 받으니까

    for i in _chord:
      if i == 'N':
        _chord = _chord[:_chord.index(i)] + _chord[_chord.index(i)+1:].lstrip()

    def first_input(year, country, genre, transpose, _chord):     
        b = _chord.split()

        c = Counter(b)
        _sum = sum(c.values())
        for i in c.keys():
            c[i] /= _sum
            
        chord_rates = c
        item = [{'year' : year, 'country' : country, 'genre' : genre, 'transpose' : transpose, 'chord' : b, 'chord_rates' : chord_rates }]
        return item


    #### chord-number change ####
    # 장조 단조 정하기
    def change_chord_number(i):
      if i != 'N':
        if len(i) == 1:
          return chord_u.index(i)
        elif len(i) == 2 and i[1] == 'm':
          return chord_u_min.index(i) + 100
        elif len(i) == 2 :
          if i[1] == '#' :
            return chord_u.index(i)
          elif i[1] == 'b' :
            return chord_d.index(i)
        elif len(i) == 3:
          if i[1] == '#' :
            return chord_u_min.index(i) + 100   
          elif i[1] == 'b' :
            return chord_d_min.index(i) + 100


    
    # chord 숫자로 변경
    def change_number_chordlist(b, chord_num):
        for i in b:
            k = change_chord_number(i)
            chord_num.append(k)
        return chord_num
    


    # 숫자로 바꾼 chord를 변조
    def change_chord_transpose(trans_num, chord_num):
        if trans_num >= 100 :   
          trans_num = (trans_num - 103) % 12                      ###### 단조는 '가'단조 이므로 3키 더 내림
        for i in range(len(chord_num)):
            chord_num[i] = (chord_num[i] - trans_num)
        return chord_num

    # 변조한 숫자 chord를 다시 코드로 변환
    def change_number_chord(chord_num):
      for i in chord_num:
        if i >= 50:
          i = (i - 100) % 12
          k = chord_u_min[i]
          new_chord.append(k)
        else:
          i %= 12
          k = chord_u[i]
          new_chord.append(k)
      return new_chord

    # 박자 고려             
    def count_space(_chord):
      cnt = 0
      _chord
      for i in _chord:
        if i == '#' or i == 'b' or i == 'm':
          continue
        if i == ' ':
          cnt += 1
        elif i == 'N':
          none = 1
        elif i != ' ' and i != 'N':
            cnt -= 2
            space_num.append(cnt)
            cnt = 1

      space_num.append(4)
      space_num.remove(space_num[0])
      return space_num
    
    # 박자 고려한 chord list
    def chord_list_with_space(new_chord, space_num):
      chord_list_with_space = []
      for i in range(len(new_chord)):
        n = space_num[i]
        for j in range(n):
          chord_list_with_space.append(new_chord[i])
      return chord_list_with_space
    
    # 박자 고려한 chord rates
    def chord_rates_with_space():
      space_chord_rates = Counter(space_chord)
      for i in space_chord_rates.keys():
        space_chord_rates[i] = space_chord_rates[i] / len(space_chord)

      return space_chord_rates



    #### start ####
            
    # 최초 입력 item으로 출력
    item = first_input(year, country, genre, transpose, _chord)
    
    # 변조 변수 받기
    _trans = item[0]['transpose']
    

    # 변조 숫자로 설정   
    trans_num = change_chord_number(_trans)
    

    # chord 숫자로 변경
    b = item[0]['chord']
    chord_num = []
    chord_num = change_number_chordlist(b, chord_num)

    # chord 숫자 변조
    chord_num = change_chord_transpose(trans_num, chord_num)

    # 숫자 다시 chord로 반환
    new_chord = []
    new_chord = change_number_chord(chord_num)

    # 박자 고려
    space_num = []
    space_num = count_space(_chord)
    
    # 박자 고려한 chord_list
    space_chord = chord_list_with_space(new_chord, space_num)       #변조한 코드(new_chord)에다가 숫자 붙여서 변주 1번으로 끝냄
    # 박자 고려한 count 
    space_chord_rates = chord_rates_with_space()
    
    # item dic 수정
    del item[0]['chord']
    del item[0]['chord_rates']
    item[0]['new_chord'] = [' '.join(new_chord)]
    item[0]['space_chord'] = [' '.join(space_chord)]
    item[0]['chord_rates_with_space'] = [space_chord_rates]
    

    return item




welcome_capstone_hell()

print(space_num, space_chord)

# For web backend test
from collections import Counter

def welcome_capstone_hell(transpose, _chord):

    #장조 음계
    chord_u = ['C','C#','D','D#','E','F','F#','G','G#','A','A#','B']
    chord_d = ['C','Db','D','Eb','E','F','Gb','G','Ab','A','Bb','B']
    #단조 음계
    chord_u_min = ['Cm','C#m','Dm','D#m','Em','Fm','F#m','Gm','G#m','Am','A#m','Bm']
    chord_d_min = ['Cm','Dbm','Dm','Ebm','Em','Fm','Gbm','Gm','Abm','Am','Bbm','Bm']

    for i in _chord:
      if i == 'N':
        _chord = _chord[:_chord.index(i)] + _chord[_chord.index(i)+1:].lstrip()

    def first_input(transpose, _chord):     
        b = _chord.split()

        c = Counter(b)
        _sum = sum(c.values())
        for i in c.keys():
            c[i] /= _sum
            
        chord_rates = c
        item = [{'transpose' : transpose, 'chord' : b, 'chord_rates' : chord_rates }]
        return item


    #### chord-number change ####
    # 장조 단조 정하기
    def change_chord_number(i):
      if i != 'N':
        if len(i) == 1:
          return chord_u.index(i)
        elif len(i) == 2 and i[1] == 'm':
          return chord_u_min.index(i) + 100
        elif len(i) == 2 :
          if i[1] == '#' :
            return chord_u.index(i)
          elif i[1] == 'b' :
            return chord_d.index(i)
        elif len(i) == 3:
          if i[1] == '#' :
            return chord_u_min.index(i) + 100   
          elif i[1] == 'b' :
            return chord_d_min.index(i) + 100


    
    # chord 숫자로 변경
    def change_number_chordlist(b, chord_num):
        for i in b:
            k = change_chord_number(i)
            chord_num.append(k)
        return chord_num
    


    # 숫자로 바꾼 chord를 변조
    def change_chord_transpose(trans_num, chord_num):
        if trans_num >= 100 :   
          trans_num = (trans_num - 103) % 12                      ###### 단조는 '가'단조 이므로 3키 더 내림
        for i in range(len(chord_num)):
            chord_num[i] = (chord_num[i] - trans_num)
        return chord_num

    # 변조한 숫자 chord를 다시 코드로 변환
    def change_number_chord(chord_num):
      for i in chord_num:
        if i >= 50:
          i = (i - 100) % 12
          k = chord_u_min[i]
          new_chord.append(k)
        else:
          i %= 12
          k = chord_u[i]
          new_chord.append(k)
      return new_chord

    # 박자 고려             
    def count_space(_chord):
      cnt = 0
      _chord
      for i in _chord:
        if i == '#' or i == 'b' or i == 'm':
          continue
        if i == ' ' or i == '':
          cnt += 1
        elif i == 'N':
          none = 1
        elif (i != ' ' and i != '') and i != 'N':
            cnt -= 2
            space_num.append(cnt)
            cnt = 1

      space_num.append(4)
      space_num.remove(space_num[0])
      return space_num
    
    # 박자 고려한 chord list
    def chord_list_with_space(new_chord, space_num):
      chord_list_with_space = []
      for i in range(len(new_chord)):
        n = space_num[i]
        for j in range(n):
          chord_list_with_space.append(new_chord[i])
      return chord_list_with_space
    
    # 박자 고려한 chord rates
    def chord_rates_with_space():
      space_chord_rates = Counter(space_chord)
      for i in space_chord_rates.keys():
        space_chord_rates[i] = space_chord_rates[i] / len(space_chord)

      return space_chord_rates



    #### start ####
            
    # 최초 입력 item으로 출력
    item = first_input(transpose, _chord)
    
    # 변조 변수 받기
    _trans = item[0]['transpose']
    

    # 변조 숫자로 설정   
    trans_num = change_chord_number(_trans)
    

    # chord 숫자로 변경
    b = item[0]['chord']
    chord_num = []
    chord_num = change_number_chordlist(b, chord_num)

    # chord 숫자 변조
    chord_num = change_chord_transpose(trans_num, chord_num)

    # 숫자 다시 chord로 반환
    new_chord = []
    new_chord = change_number_chord(chord_num)

    # 박자 고려
    space_num = []
    space_num = count_space(_chord)
    
    # 박자 고려한 chord_list
    space_chord = chord_list_with_space(new_chord, space_num)       #변조한 코드(new_chord)에다가 숫자 붙여서 변주 1번으로 끝냄
    # 박자 고려한 count 
    space_chord_rates = chord_rates_with_space()
    
    # item dic 수정
    del item[0]['chord']
    del item[0]['chord_rates']
    item[0]['new_chord'] = [' '.join(new_chord)]
    item[0]['space_chord'] = [' '.join(space_chord)]
    item[0]['chord_rates_with_space'] = [space_chord_rates]
    

    return item

welcome_capstone_hell(__a, __b)

import random
a = [0,1,2,3,4,5,6,7,8,9]
n = random.randrange(0,10)

s = a[n]
t = a[n]
print(s,t)