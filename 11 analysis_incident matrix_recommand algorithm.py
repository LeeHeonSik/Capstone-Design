# -*- coding: utf-8 -*-
"""나는 빛나 마치 다이아몬드.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10X1ggHN_WrkF4fjeDxaHq5ry_0iTtTy8

# 빌리 아일리시 빌리 에일리쉬 빌리 아일리쉬 billie eilish
"""

import json
with open('./train.json', 'rb') as f:
    pl = json.load(f)
  
print(pl[0])

#  'songs': [525514, 129701, 38   /   'tags': ['락']

with open('./song_meta.json', 'rb') as f:
    num = json.load(f)

print(num[10])

#  'id': 10   / 'song_name': 'Hi (Heyoo)'

import pickle as pkl
with open('./2021_10_31.pkl', 'rb') as f:
  s = pkl.load(f)

print(s[0])

#  'Songname': 'Breaking Down',



from tqdm import tqdm

for i in tqdm(range(len(s))):
  for j in range(len(num)):
    if s[i]['Songname'] == num[j]['song_name']:
      s[i]['id'] = num[j]['id']
      break
  else :
    s[i]['id'] = 'none'

    
print(s[10])

# print(s[10])

for i in tqdm(range(len(s))):
  for j in range(len(pl)):
    try:
      if s[i]['id'] in pl[j]['songs']:
        s[i]['tags'] = pl[j]['tags']
        break
    except:
      pass

print(s[100],'\n', s[101], '\n', s[102])

c=0
for i in s:
  if i['id'] == 'none':
    c += 1
print(c)

dic_tags = {}
for i in range(len(s)):
  try:
    for j in s[i]['tags']:
      dic_tags[j] = dic_tags.get(j,0) + 1
  except:
    pass

print(dic_tags)

"""# let's make fxxking incident matrix"""

## songs -> chords
## song tags -> chords tags -> matrix
## chord = {songname : [[C_F_Am_G, 0.16],[],[]]... songname : [[][][]...]...}
## tags = {songname : 'songname', tags : '슬픔', ......}

## 행 : 코드/ 열 : 태그
## row_chords = ['C_F_Am_G', C_G_Dm_Em', ....]
## column_tags = ['슬픔', '기쁨',......]
## data = {C_F_Am_G : [[0.16 + 0.03, '슬픔'], + '기쁨'], C_G_Dm_Em : [..]}      <= 필요한가?
## incident matrtix = [[0.19, 0, 0, ....],[0, 0,02, ....],[]...]

#               슬픔   기쁨    .....
#     C_F_Am_G   0.19    0      0      .....
#     C_G_Dm_Em  0       0.02   0
#       .....

import pickle as pkl
with open('./diamonts_norm.pkl', 'rb') as f:
    row_chords = pkl.load(f)

row_chords = sorted(row_chords, key=lambda x:x[1], reverse=True)
print(row_chords[:10])

with open("row_chords.pkl","wb") as f:
    pkl.dump(row_chords,f)

with open('./2021_11_14_tagged.pkl', 'rb') as f:
  song_tags = pkl.load(f)

print(song_tags[:10])

column_tags = [('감성', 96), ('발라드', 90), ('힐링', 89), ('휴식', 86), ('사랑', 81), ('기분전환', 80), ('새벽', 70), ('잔잔한', 69), ('밤', 65), ('이별', 56), ('드라이브', 54), ('추억', 53), ('슬픔', 49), ('인디', 46), ('설렘', 42), ('회상', 38), ('팝', 35), ('Pop', 34), ('비오는날', 30), ('여행', 26), ('카페', 25), ('OST', 24), ('가을', 23), ('스트레스', 23), ('겨울', 21), ('신나는', 20), ('봄', 20), ('락', 18), ('우울', 18), ('명곡', 17), ('알앤비', 17), ('산책', 16), ('매장음악', 15), ('조용한', 15), ('드라마', 14), ('까페', 14), ('혼자', 14), ('댄스', 12), ('운동', 12), ('새벽감성', 12), ('주말', 12), ('감미로운', 12), ('위로', 12), ('달달', 12), ('힙합', 11), ('분위기', 11), ('여름밤', 10), ('취향저격', 10), ('감성발라드', 10), ('Rock', 10), ('팝송', 10), ('록', 9), ('어쿠스틱', 9), ('고백', 8), ('저녁', 8), ('혼자있을때', 8), ('좋은노래', 8), ('매장', 8), ('나만알고싶은', 8), ('80년대', 7), ('여름', 7), ('영화', 7), ('조용히', 7), ('또는', 7), ('고민', 7), ('맥주한잔', 7), ('추천곡', 7), ('재즈', 7), ('연말', 7), ('커피', 7), ('빌보드', 7), ('여자가수', 7), ('90년대', 6), ('비', 6), ('가요', 6), ('썸', 6), ('달달한', 6), ('질리지않는', 6), ('명품발라드', 6), ('고음병', 6), ('편안한', 6), ('빌보드Hot50', 6), ('90년대발라드', 5), ('올드송', 5), ('옛날노래', 5), ('띵곡', 5), ('오후', 5), ('센치한', 5), ('그루브', 5), ('에너지', 5), ('숨은명곡', 5), ('Jazz', 5), ('bgm', 5), ('띵곡들', 5), ('멜로디', 5), ('듀엣', 5), ('OST모음', 5), ('일상', 5), ('감성적인', 5), ('비_오는_날', 4), ('비_오는날', 4), ('노래', 4), ('안녕', 4), ('짝사랑', 4), ('연애', 4), ('음악', 4), ('KoreanRock', 4), ('한국록', 4), ('한국락', 4), ('EDM', 4), ('힘내', 4), ('무드', 4), ('스웩', 4), ('잔잔하게', 4), ('조용하게', 4), ('술', 4), ('추천', 4), ('헤비메탈', 4), ('크리스마스', 4), ('겨울왕국', 4), ('새해', 4), ('아이돌', 4), ('여유', 4), ('그리움', 4), ('피쳐링', 4), ('남녀', 4), ('연인', 4), ('두근두근', 4), ('꿀', 4), ('솔로', 4), ('영국', 4), ('기타', 4), ('한국ost', 4), ('파티', 4), ('셋리스트', 4), ('뉴에이지', 4), ('느낌있는', 4), ('봄캐롤', 4), ('클럽', 4), ('2000', 3), ('TV', 3), ('내가좋아하는', 3), ('좋아좋아', 3), ('사극', 3), ('추억의', 3), ('랩', 3), ('공연', 3), ('헬스', 3), ('음색', 3), ('시대별차트', 3), ('국내차트', 3), ('벚꽃', 3), ('2016', 3), ('서재페', 3), ('제10회', 3), ('pub', 3), ('맥주', 3), ('모던록', 3), ('스텔라', 3), ('모던락', 3), ('장르불문', 3), ('눈오는날', 3), ('캐럴', 3), ('따듯한', 3), ('크리스마스캐럴', 3), ('겨울노래', 3), ('크리스마스송', 3), ('클래식', 3), ('조용한음악', 3), ('잔잔', 3), ('행복', 3), ('일렉', 3), ('달닻', 3), ('따뜻한', 3), ('포근한', 3), ('노래추천', 3), ('싱어송라이터', 3), ('드라마ost', 3), ('중독성', 3), ('2017', 3), ('산뜻', 3), ('퀸', 3), ('기분좋은', 3), ('HipHop', 3), ('봄노래', 3), ('락발라드', 3), ('카페음악', 3), ('커플', 3), ('귀르가즘', 3), ('팝송추천', 3), ('추억회상', 2), ('운동할때', 2), ('한번쯤들어봤던노래', 2), ('감성감성', 2), ('유명한', 2), ('세벽감성', 2), ('센치하게', 2), ('연애중', 2), ('달달하게', 2), ('여름밤에듣기좋은음악', 2), ('썸타는중', 2), ('들어봤을', 2), ('1960', 2), ('한번쯤은', 2), ('2016멜로디포레스트캠프', 2), ('자연', 2), ('쉼표', 2), ('차분', 2), ('가창력', 2), ('장마', 2), ('여름방학', 2), ('차분한', 2), ('30대', 2), ('포근함', 2), ('따스한', 2), ('감성자극', 2), ('이별노래', 2), ('잠오지않는밤에', 2), ('후회만가득한밤', 2), ('헤어지는중', 2), ('감성충만', 2), ('이별준비', 2), ('헤어진후', 2), ('이별감성', 2), ('내취향', 2), ('잡다', 2), ('메리', 2), ('보물창고', 2), ('하드락', 2), ('LA메탈', 2), ('프로필음악', 2), ('카카오톡', 2), ('소원', 2), ('프로필', 2), ('소망', 2), ('다짐', 2), ('카톡', 2), ('1990년대', 2), ('10대', 2), ('걸그룹', 2), ('겨울감성', 2), ('1990', 2), ('로맨틱', 2), ('1970년대', 2), ('시작', 2), ('화이팅', 2), ('업데이트중', 2), ('잔잔함', 2), ('알앤비소울', 2), ('RnB', 2), ('외국힙합노래', 2), ('우울한', 2), ('그냥', 2), ('산뜻한', 2), ('자장가', 2), ('사랑노래', 2), ('여운', 2), ('명곡을널리', 2), ('런쥔', 2), ('라디오', 2), ('매력', 2), ('팝플레이리스트', 2), ('누군가생각날때', 2), ('잔잔한노래', 2), ('조용한노래', 2), ('버스창가', 2), ('가사', 2), ('선선한밤', 2), ('잠자기_전', 2), ('응답하라', 2), ('복고', 2), ('개인취향', 2), ('아침', 2), ('HiFi가이드', 2), ('한지훈', 2), ('퇴근길', 2), ('대중가요', 2), ('인기곡', 2), ('휠링', 2), ('추억소환', 2), ('12월', 2), ('애창곡', 2), ('플레이리스트', 2), ('MTVEMA', 2), ('MTV', 2), ('잔잔하고_따스한', 2), ('어쿠스틱음악', 2), ('슬픈노래', 2), ('신나는노래', 2), ('피아노', 2), ('응원', 2), ('집콕', 2), ('눈물', 2), ('진원', 2), ('스트레스해소', 2), ('데이트', 2), ('삽입곡', 2), ('삼시세끼', 2), ('트로피컬하우스', 2), ('트렌드', 2), ('센치', 2), ('울고싶은날', 2), ('한동윤', 2), ('로큰롤', 2), ('로큰롤명예의전당', 2), ('명예의전당', 2), ('다중음격', 2), ('호원대', 2), ('신의목소리', 2), ('불후의명곡', 2), ('셜록', 2), ('복면가왕', 2), ('워너원', 2), ('프로듀스101시즌2', 2), ('코리아갓탤런트', 2), ('김재환', 2), ('차안', 2), ('팝송모음', 2), ('빌보드핫차트', 2), ('내한', 2), ('페이크버진', 2), ('빌리아일리시', 2), ('빌리에일리쉬', 2), ('빌리아일리쉬', 2), ('billieeilish', 2), ('예스24라이브홀', 2), ('FakeVirgin', 2), ('우울할때', 1), ('신날때', 1), ('2000년대', 1), ('Top100에', 1), ('댄스신에', 1), ('댄스음악', 1), ('기쁠때', 1), ('록메탈', 1), ('메탈', 1), ('위대한쇼맨OST', 1), ('만남', 1), ('달콤함', 1), ('GYM', 1), ('근육', 1), ('홈트', 1), ('크로스핏', 1), ('참이슬', 1), ('Alternative', 1), ('브이앱', 1), ('필레이리스트', 1), ('DAY6', 1), ('데이식스추천', 1), ('V앱', 1), ('데이식스', 1), ('원필', 1), ('조용', 1), ('배우', 1), ('목소리', 1), ('기록', 1), ('순위', 1), ('기네스', 1), ('역대급', 1), ('감각적인', 1), ('웃음', 1), ('J', 1), ('듣고', 1), ('이거', 1), ('조용한곳에서', 1), ('상큼발랄', 1), ('다양한', 1), ('100곡', 1), ('즐겨듣는', 1), ('100', 1), ('오열', 1), ('공허', 1), ('숨은띵곡', 1), ('아님말고', 1), ('ballads', 1), ('올드팝', 1), ('독서', 1), ('인기가요', 1), ('보이그룹', 1), ('아이돌명곡', 1), ('썸남썸녀', 1), ('something', 1), ('차트', 1), ('인기순위', 1), ('서정적', 1), ('팝록', 1), ('록발라드', 1), ('소프트록', 1), ('부드러운', 1), ('하드록', 1), ('하드록명곡', 1), ('걸작', 1), ('다비치', 1), ('여성듀오', 1), ('오늘의추천가수', 1), ('노르웨이숲', 1), ('5월하늘에', 1), ('이소라', 1), ('감기', 1), ('연말결산', 1), ('한강', 1), ('하늘', 1), ('쓸쓸한', 1), ('드라이빙', 1), ('퓨전재즈', 1), ('경쾌한', 1), ('달콤한', 1), ('마이클부블래', 1), ('popsong', 1), ('애시드', 1), ('빅밴드', 1), ('스윙', 1), ('빠담빠담', 1), ('도키도키', 1), ('보이스', 1), ('뺏고싶다', 1), ('성대', 1), ('세레나데', 1), ('방탄소년단', 1), ('안식처', 1), ('스포츠', 1), ('피트니스', 1), ('다이어트', 1), ('런닝', 1), ('레깅스', 1), ('필라테스', 1), ('요가', 1), ('듣고가세요', 1), ('팝잘알', 1), ('미련', 1), ('기다림', 1), ('보고싶다', 1), ('이별하고듣는노래', 1), ('생각나', 1), ('실연', 1), ('보이밴드', 1), ('electronica', 1), ('오피셜차트', 1), ('정승환', 1), ('아이유', 1), ('호텔델루나OST', 1), ('도입', 1), ('분위기_좋은_노래', 1), ('세련되고', 1), ('인생곡들만', 1), ('늦잠', 1), ('아쉬움', 1), ('불면증', 1), ('외로움', 1), ('슈가맨', 1), ('무념무우우우우우우우웅유상', 1), ('멍때리기', 1), ('모티베이션', 1), ('헬창', 1), ('Major_Lazer', 1), ('The_Script', 1), ('punk', 1), ('Muse', 1), ('AVICII', 1), ('Linkin_Park', 1), ('Coldplay', 1), ('아드레날린', 1), ('샤우팅', 1), ('강렬한사운드', 1), ('운동할때듣는', 1), ('rockisnotdead', 1), ('명곡들', 1), ('마음에', 1), ('발라드추천곡', 1), ('국내음악', 1), ('아재', 1), ('세대공감', 1), ('느낌충만', 1), ('카페테리아', 1), ('편안함', 1), ('따스함', 1), ('아련', 1), ('명장면', 1), ('자기전에듣는', 1), ('수면', 1), ('팝추천', 1), ('외신', 1), ('음잘알', 1), ('팝리스트', 1), ('몽환', 1), ('감성팝', 1), ('추억을', 1), ('갬성갬성', 1), ('니예니예', 1), ('믿고듣는', 1), ('여름송', 1), ('해변', 1), ('바다', 1), ('청량한', 1), ('휴가', 1), ('스쿨오브록', 1), ('프레디머큐리', 1), ('Queen', 1), ('라라랜드', 1), ('라붐', 1), ('보헤미안랩소디', 1), ('추억의팝송', 1), ('레전드', 1), ('1980', 1), ('뉴웨이브', 1), ('legend', 1), ('생일', 1), ('축하', 1), ('happy', 1), ('타임리스', 1), ('Timeless', 1), ('커피숍', 1), ('즐거운', 1), ('시대를초월한', 1), ('가을감성', 1), ('멜로디포레스트캠프', 1), ('멜포캠', 1), ('공연오락반장', 1), ('노래나듣자', 1), ('회식', 1), ('불금', 1), ('비투비', 1), ('인디팝', 1), ('히든트랙', 1), ('트렌디', 1), ('멍때리고', 1), ('Lofi', 1), ('편하게', 1), ('남자보컬', 1), ('일렉트로니카', 1), ('Popular', 1), ('Billboard', 1), ('uspop', 1), ('내가카페사장이면이노래튼다', 1), ('느낌적인느낌', 1), ('썸남썸녀에게들려주면있어보임', 1), ('편집샵st', 1), ('비트', 1), ('쓸쓸', 1), ('명반', 1), ('아픔', 1), ('여유로운', 1), ('연주곡', 1), ('눈', 1), ('혼술', 1), ('블루스락', 1), ('한밤', 1), ('블루스', 1), ('쓸쓸함', 1), ('myfavoritesong', 1), ('좋아하는노래', 1), ('헤어짐', 1), ('애니', 1), ('파티뮤직', 1), ('레게', 1), ('웹진웨이브', 1), ('weiv', 1), ('위클리초이스', 1), ('댄스유발', 1), ('내적댄스', 1), ('두둠칫', 1), ('흥폭발', 1), ('댄스곡', 1), ('고급진사운드', 1), ('ralalra', 1), ('밴드', 1), ('밴드음악', 1), ('시즌2', 1), ('시즌1', 1), ('일띵이띵', 1), ('할링', 1), ('연말감성', 1), ('연말노래', 1), ('차트100', 1), ('인디음악다수', 1), ('연애세포', 1), ('음악캐스터', 1), ('맞춤선곡', 1), ('이런날엔이런음악', 1), ('배경음악', 1), ('휴양지', 1), ('산촌편', 1), ('TVN', 1), ('캠핑', 1), ('토닥토닥', 1), ('40대', 1), ('도전', 1), ('나의', 1), ('작업', 1), ('노래방', 1), ('리듬', 1), ('기타리스트', 1), ('사운드', 1), ('악기', 1), ('블랙아이드필승', 1), ('야경', 1), ('음원선물', 1), ('스밍초보', 1), ('송가인', 1), ('정미애', 1), ('송가인팬', 1), ('정미애님팬', 1), ('nujabes', 1), ('Freetempo', 1), ('mflo', 1), ('째즈힙합', 1), ('시부야케이', 1), ('추석', 1), ('설날', 1), ('고속도로', 1), ('신난_흥겨운', 1), ('Pop_Ballads', 1), ('팝발라드', 1), ('겨울연가', 1), ('겨울팝', 1), ('고막여친', 1), ('나들이', 1), ('노동요', 1), ('하드코어', 1), ('100번', 1), ('책', 1), ('버스', 1), ('이별하고', 1), ('aomg', 1), ('감성힙합', 1), ('국내힙합', 1), ('쇼미', 1), ('인싸', 1), ('국힙', 1), ('김종국', 1), ('그는천상가수였다', 1), ('사랑스러워', 1), ('화이트데이', 1), ('개강', 1), ('설레임', 1), ('개학', 1), ('모태솔로', 1), ('인디음악', 1), ('트로트', 1), ('사무실', 1), ('동요', 1), ('인생곡', 1), ('슬픈발라드', 1), ('감수성', 1), ('전곡듣기', 1), ('HYNN', 1), ('밴드사운드', 1), ('히트곡', 1), ('Heroic한', 1), ('기운빠질때', 1), ('상큼한', 1), ('발랄', 1), ('8bitElectro', 1), ('최신', 1), ('2017년', 1), ('헤이즈', 1), ('데드풀삽입곡', 1), ('데드풀', 1), ('마블', 1), ('데드풀2', 1), ('엑스멘', 1), ('기분전환에좋은신나는노래', 1), ('가사없음', 1), ('Takealook', 1), ('떄껄룩', 1), ('팝음악', 1), ('유튜브', 1), ('떼껄룩', 1), ('onedirection', 1), ('원디렉션', 1), ('내', 1), ('아이돌솔로', 1), ('규현', 1), ('소울', 1), ('출발', 1), ('2020', 1), ('연초', 1), ('태교음악', 1), ('EQ지수', 1), ('임산부', 1), ('아이', 1), ('아기', 1), ('헤어진연인', 1), ('그리워', 1), ('절절한', 1), ('잊지못해', 1), ('인정', 1), ('카푸치노', 1), ('라떼', 1), ('스벅', 1), ('아메리카노', 1), ('최애음악', 1), ('LilNasX', 1), ('듀엣곡', 1), ('범규', 1), ('투모로우바이투게더', 1), ('NCS', 1), ('리믹스', 1), ('일렉트로닉', 1), ('Lizzo', 1), ('컨트리', 1), ('포크', 1), ('거짓말', 1), ('아픈', 1), ('차막힘', 1), ('차막힐때', 1), ('졸릴때', 1), ('상큼', 1), ('귀호강', 1), ('목아픔', 1), ('진땀', 1), ('비스트', 1), ('시원한', 1), ('햇살', 1), ('봄바람', 1), ('감동적인', 1), ('축제', 1), ('주점', 1), ('대학교', 1), ('나만들을꺼', 1), ('나만들을거얌', 1), ('김이나', 1), ('그룹', 1), ('작사', 1), ('작사가', 1), ('sma스마', 1)]


with open("column_tags.pkl","wb") as f:
  pkl.dump(column_tags,f)

with open('./chord_dia_11_14 (1).pkl', 'rb') as f:
  total_chords = pkl.load(f)

print(total_chords)

incident_matrix =  [[0 for _ in range(len(column_tags))] for _ in range(len(row_chords))]

for i in incident_matrix:
  print(i)

from tqdm import tqdm
chord2ind = {}
for n, chords in enumerate(row_chords):
  chord2ind[chords[0]] = n


tag2ind = {}
for n, tag in enumerate(column_tags):
  tag2ind[tag[0]] = n

for i in tqdm(song_tags):
  chords = total_chords[i['Songname']]
  for chord, num in chords:
    r = chord2ind[chord]
    for tag in i['tags']:
      c = tag2ind[tag]

      incident_matrix[r][c] += num

for i in incident_matrix:
  print(i)

import pickle

with open("incident_matrix.pkl","wb") as f:
    pickle.dump(incident_matrix,f)

c, t= 0, 0
for i in incident_matrix:
  for j in i:
    # t  += j
    if j == 0:
      c +=1

print(c, len(incident_matrix), len(incident_matrix[0]), (c / (len(incident_matrix) * len(incident_matrix[0]))))

"""# seriously? yes. it's algorithm"""

#장조 음계
chord_u = ['C','C#','D','D#','E','F','F#','G','G#','A','A#','B']
chord_d = ['C','Db','D','Eb','E','F','Gb','G','Ab','A','Bb','B']
#단조 음계
chord_u_min = ['Cm','C#m','Dm','D#m','Em','Fm','F#m','Gm','G#m','Am','A#m','Bm']
chord_d_min = ['Cm','Dbm','Dm','Ebm','Em','Fm','Gbm','Gm','Abm','Am','Bbm','Bm']

# Original_Kenote 받아서 인덱스로 변환(Transpose 값 지정)
## Diamond 받아서 인덱스로 변환
def change_chord_number(i):
  if len(i) == 1:
    return chord_u.index(i)
  elif len(i) == 2 and i[1] == 'm':
    return chord_u_min.index(i) + 100
  elif len(i) == 2 :
    if i[1] == '#' :
      return chord_u.index(i)
    elif i[1] == 'b' :
      return chord_d.index(i) + 1000
  elif len(i) == 3:
    if i[1] == '#' :
      return chord_u_min.index(i) + 100
    elif i[1] == 'b' :
      return chord_d_min.index(i) + 1000 + 100

# 숫자로 바꾼 Diamond(chord_num)를 Original_Kenote(trans_num) 값만큼 변조
def change_chord_transpose(trans_num, chord_num):
    if trans_num >= 1100:
      tarns_num = (trans_num - 1103) % 12
    elif trans_num >= 1000:
      trans_num = (trans_num - 1000) % 12
    elif trans_num >= 100 :   
      trans_num = (trans_num - 103) % 12
    for i in range(len(chord_num)):
        chord_num[i] = (chord_num[i] - trans_num)
    return chord_num

def change_chord_reverse_transpose(trans_num,chord_num):
    if trans_num >= 1100:
      tarns_num = (trans_num - 1103) % 12
    elif trans_num >= 1000:
      trans_num = (trans_num - 1000) % 12
    elif trans_num >= 100 :   
      trans_num = (trans_num - 103) % 12
    for i in range(len(chord_num)):
        chord_num[i] = (chord_num[i] + trans_num)
    return chord_num

# 변조된 Diamond(index 형태)를 코드로 재변환
def change_number_chord(chord_num):
  new_chord = []
  for i in chord_num:
    if i >= 1050:
      i = (i - 1100) % 12
      k = chord_d_min[i]
      new_chord.append(k)      
    elif i >= 950:
      i = (i - 1000) % 12
      k = chord_d[i]
      new_chord.append(k)
    elif i >= 50:
      i = (i - 100) % 12
      k = chord_u_min[i]
      new_chord.append(k)
    else:
      i %= 12
      k = chord_u[i]
      new_chord.append(k)
  return new_chord

# 샵을 플랫으로, 플랫을 샵으로 바꿔주는 신묘한 코드
def change_chord_f_s(i):
  if len(i) == 1:
    return chord_d[chord_u.index(i)]
  elif len(i) == 2 and i[1] == 'm':
    return chord_d_min[chord_u_min.index(i)]
  elif len(i) == 2 :
    if i[1] == '#' :
      return chord_d[chord_u.index(i)]
    elif i[1] == 'b' :
      return chord_u[chord_d.index(i)]
  elif len(i) == 3:
    if i[1] == '#' :
      return chord_d_min[chord_u_min.index(i)]   
    elif i[1] == 'b' :
      return chord_u_min[chord_d_min.index(i)]

# 키노트 받고, 입력받은 코드를 변조해서 알려줌.
# 이제 이 코드 갖다 검색해서 추천코드 띄워줄 수 있도록 해야 함.
inputkey = input()
num_inputkey = change_chord_number(inputkey)
print(num_inputkey)

inputchords = list(input().split())
num_inputchords = []
for i in inputchords:
  num_inputchords.append(change_chord_number(i))
  print(i)

num_outputchords = change_chord_transpose(num_inputkey,num_inputchords)
outputchords = change_number_chord(num_outputchords)

output = '_'.join(outputchords)
print(output)


print(num_inputchords)
print(num_outputchords)
print(outputchords)

import pickle

with open('diamonds.pkl', 'rb') as f:
  data = pickle.load(f)

for a in data:
  print(a)

with open('chord_dia_11_14 (1).pkl', 'rb') as p:
  data2 = pickle.load(p)

# for a in data2.items():
#   print(a)
#
# ('Breaking Down', [['F#_B_Em_A_F#_B_Em_A', 0.016], ['B_Em_A_Em_B_Em_A_Em', 0.016], ['Em_A_Em_C_Em_A_Em_C', 0.016], ['A_Em_C_G_A_Em_C_G', 0.032], ['Em_C_G_B_Em_C_G_B', 0.128], ['Em_C_G_D_Em_C_G_D', 0.492], ['C_G_D_B_C_G_D_B', 0.032], ['D_B_C_Em_D_B_C_Em', 0.016], ['B_C_Em_G_B_C_Em_G', 0.016], ['C_Em_G_F#m_C_Em_G_F#m', 0.016], ['Em_G_F#m_Em_Em_G_F#m_Em', 0.016], ['G_F#m_Em_C_G_F#m_Em_C', 0.032], ['C_G_D_A_C_G_D_A', 0.016], ['G_D_A_Em_G_D_A_Em', 0.016], ['D_A_Em_C_D_A_Em_C', 0.016], ['Em_C_G_E_Em_C_G_E', 0.064], ['C_G_D_G_C_G_D_G', 0.016], ['G_D_G_Em_G_D_G_Em', 0.016], ['D_G_Em_C_D_G_Em_C', 0.016], ['G_Em_C_G_G_Em_C_G', 0.016]])
# ('거짓말 같은 시간', [['C_F_Am_G_C_F_Am_G', 0.01], ['C_F_Am_C_C_F_Am_C', 0.01],

with open('2021_11_14_tagged.pkl', 'rb') as g:
  data3 = pickle.load(g)

#for a in data3:
#  print(a)
#
#{'Original_keynote': 'D', 'Songname': '거짓말 같은 시간', 'tags': ['80년대', '감성', '90년대발라드', '올드송', '추억', '휴식', '90년대', '옛날노래']}
#{'Original_keynote': 'F', 'Songname': '세 사람', 'tags': ['비오는날', '비_오는_날', '휴식', '비_오는날', '비']}

with open('row_chords.pkl','rb') as f:
  row_chords = pickle.load(f)

print(row_chords[0])

recommand_chords = []
index_row_chords = []
for i in range(len(row_chords)):
  if output in row_chords[i][0]:
    recommand_chords.append(row_chords[i][0])
    index_row_chords.append(i)
print(recommand_chords)
print(index_row_chords)

for i in recommand_chords:
  c = i.split('_')
  J = []
  for j in c:
    j = change_chord_number(j)
    J.append(j)
  k = change_chord_reverse_transpose(num_inputkey,J)
  l = change_number_chord(k)
  if num_inputkey > 950:
    ans = []
    for c in l:
      ans.append(change_chord_f_s(c))
  else:
    ans = l
  print('_'.join(an for an in ans))

print(len(recommand_chords))

with open('incident_matrix.pkl','rb') as f:
  incident_matrix = pickle.load(f)

index_tag = {}
for i in index_row_chords:
  #print(incident_matrix[i])
  for j in range(726):
    if incident_matrix[i][j] > 0:
      index_tag[j]= index_tag.get(j, 0) + incident_matrix[i][j]
      # print(incident_matrix[i][j])
      # print(index_tag)

sort_index_tag = sorted(index_tag.items(), key = lambda x : x[1], reverse = True)
print(sort_index_tag)
#print(index_tag)
#print(len(index_tag))
# row_chords의 인덱스를 알아야 incident_matrix에 해당 인덱스를 집어넣어 태그 분석이 가능
# 0이 아닌 값의 인덱스를 알아낸 후 column_tags에서 해당 태그가 무엇인지 알아냄

with open('column_tags.pkl','rb') as f:
  column_tags = pickle.load(f)

for i in sort_index_tag[:10]:
  j = i[0]
  print(column_tags[j])

# Matrix에 노래 id 추가
# chord -> tags -> 노래 -> id
# total chords : 노래 + 다이아몬드 코드
# song_tags : 노래 + 키노트 + 태그

#chord_u = ['C','C#','D','D#','E','F','F#','G','G#','A','A#','B']
#chord_d = ['C','Db','D','Eb','E','F','Gb','G','Ab','A','Bb','B']
#단조 음계
#chord_u_min = ['Cm','C#m','Dm','D#m','Em','Fm','F#m','Gm','G#m','Am','A#m','Bm']
#chord_d_min = ['Cm','Dbm','Dm','Ebm','Em','Fm','Gbm','Gm','Abm','Am','Bbm','Bm']

for i in row_chords:
  print(i)

for i in column_tags:
  print(i)

for i in row



for tc,x in total_chords.items():
  print(tc)

# song_tags에서 태그 검색해서 노래 찾기
from tqdm import tqdm

DB = {}

def finding_song_from_tags(rc,tag):
  chords_tags_songs = set()
  for s in song_tags:
    Roof = True
    if tag in s['tags']:
      for tc,tc_chords in total_chords.items():
        if Roof == False:
          continue
        try :
          if s['Songname'] == tc:
            for x in tc_chords:
              if rc == x[0]:
                chords_tags_songs.add(s['Songname'])
                Roof = False
                continue
        except:
          pass
  return list(chords_tags_songs)

for c in tqdm(range(len(row_chords))):
  C = row_chords[c][0]
  tags_songs = {}
  for t in range(len(column_tags)):
    T = column_tags[t][0]
    if incident_matrix[c][t] != 0:
      f = finding_song_from_tags(C,T)
      if len(f) > 3:
        f = random.sample(f, 3)
      tags_songs[T] = f
  DB[C] = tags_songs

print(DB.items())

import json

with open("DB_Data.json", "w") as json_file:
    json.dump(DB, json_file)

def finding_song_from_tags(chord, tag):
    song_set = []

    for s in song_tags:
        if tag in s['tags']:
            for song, tc in total_chrods.items():
                if s['Songname'] == song and chord in tc:
                    song_set.append(song)

